plugins {
    id 'jacoco'
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.jetbrains.dokka' version '0.10.1'
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    id "com.github.ben-manes.versions" version "0.28.0"
}

group projectGroupId
version projectVersion

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


ext {
    processorApiVersion = '1.1.0-SNAPSHOT'
    jacksonVersion = '2.11.0'

    bintrayUser = project.hasProperty ('BINTRAY_USER') ? BINTRAY_USER : 'n/a'
    bintrayKey =  project.hasProperty ('BINTRAY_KEY')  ? BINTRAY_KEY  : 'n/a'
}


repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }

    maven {
        url "https://dl.bintray.com/openapi-processor/primary"
        content {
           includeGroup "io.openapiprocessor"
        }
        mavenContent {
            releasesOnly()
        }
    }

    maven {
        url "https://oss.jfrog.org/artifactory/oss-snapshot-local"
        content {
           includeGroup "io.openapiprocessor"
        }
        mavenContent {
            snapshotsOnly()
        }
    }
}

sourceSets {
  main {
    java {
        srcDirs += "${buildDir}/version/java/main"
    }
  }
}

compileJava.dependsOn "generateVersion"


test {
    useJUnitPlatform()
}

testSets {
    testInt
}

check.dependsOn testInt


compileGroovy {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDir)
}

compileTestGroovy {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDir)
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    components.all(JacksonPlatformRule)
    components.all(KotlinPlatformRule)

    compileOnly "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    implementation 'io.openapiprocessor:openapi-processor-core:1.0.0-SNAPSHOT'

    implementation 'org.codehaus.groovy:groovy:2.5.12'
    implementation 'org.slf4j:slf4j-api:1.7.30'

    testImplementation ("io.openapiprocessor:openapi-processor-api:$processorApiVersion")

    testImplementation ('io.openapiprocessor:openapi-processor-test:1.0.0-SNAPSHOT') {
        exclude group: 'com.google.guava'
    }

    testImplementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    testImplementation("com.google.jimfs:jimfs:1.1") {
         exclude group: 'com.google.guava'
     }

    testImplementation ('org.spockframework:spock-core:2.0-M2-groovy-2.5') {
        exclude group: 'org.codehaus.groovy' // avoid unused groovy packages
    }
    testImplementation ('org.spockframework:spock-junit4:2.0-M2-groovy-2.5') {
        exclude group: 'org.codehaus.groovy' // avoid unused groovy packages
    }
    testImplementation 'net.bytebuddy:byte-buddy:1.10.11'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'

    constraints {
        testImplementation ('org.junit.platform:junit-platform-engine:1.6.2')
        testImplementation ('junit:junit:4.13')
    }
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport
}


jacoco {
    toolVersion = "0.8.5"
}

project.jacocoTestReport {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set ('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: [groovydoc, dokka]) {
    archiveClassifier.set ('javadoc')
    from "$buildDir/docs"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

groovydoc {
    destinationDir file("$buildDir/docs/groovy")
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/docs/kotlin"
}

apply plugin: VersionPlugin
apply from: "${rootProject.rootDir}/gradle/publishing.gradle"
